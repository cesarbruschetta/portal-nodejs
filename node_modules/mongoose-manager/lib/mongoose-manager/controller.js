
module.exports = function (app, mongoose, manager, utils) {

  /**
   * Collection name parameter
   */

  app.param('collection', function (req, res, next, name) {
    req.collection = name
    next()
  })


  /**
   * Document id parameter
   *
   * Load the document in req.document
   */

  app.param('id', function (req, res, next, id) {
    if (!req.collection) return next(new Error('No collection specified'))

    var map = manager.map[req.collection]
      , Model = map.model
      , fields = map.fields

    Model
      .findOne({_id: id}, fields.map(function (field) {return field.name}))
      .run(function (err, doc) {
        if (err) return next(err)

        // find the referenced field and populate
        fields.map(function (field) {
          if (field.referenced) {
            var RefModel = mongoose.models[field.type]
            RefModel
              .findOne({_id : doc[field.name]})
              .run(function (err, refDoc) {
                if (err) return next(err)
                doc[field.name] = refDoc
              })
          }
        })
        req.document = doc
        next()
      })
  })


  /**
   * GET /admin
   *
   * List all the collections
   */

  app.get('/', function (req, res, next) {
    res.render('collections', {
      collections: Object.keys(manager.map)
    })
  })


  /**
   * GET /admin/:collection
   *
   * List all the documents in the collection
   */

  app.get('/:collection', function (req, res, next) {

    var map = manager.map[req.collection]
      , Model = map.model
      , fields = map.fields

    Model
      .find({}, fields.map(function (field) {return field.name}))
      .run(function (err, docs) {
        res.render('documents', {
          docs: docs,
          collection: req.collection,
          fields: fields
        })
      })

  })


  /**
   * Show Edit route callback function
   */

  routeCallback = function (req, res, next) {

    var map = manager.map[req.collection]
      , fields = map.fields
      , operation = req.url.split('/')[req.url.split('/').length - 1]
      , template = operation == 'edit' ? 'form' : 'document'

    res.render(template, {
      doc: req.document,
      collection: req.collection,
      fields: fields
    })

  }


  /**
   * GET /admin/:collection/:id
   */

  app.get('/:collection/:id', routeCallback)


  /**
   * GET /admin/:collection/:id/edit
   */

  app.get('/:collection/:id/edit', routeCallback)


  /**
   * PUT /admin/:collection/:id
   */

  app.put('/:collection/:id', function (req, res) {
    var updatedFields = req.body[req.collection]
      , model = req.document
      , map = manager.map[req.collection]
      , fields = map.fields

    model = utils.mergeRecursive(model, updatedFields)

    model.save(function (err) {
      if (err) throw err
      res.render('document', {
        doc: req.document,
        collection: req.collection,
        fields: fields
      })
    })

  })


  /**
   * DELETE /admin/:collection/:id
   */

  app.del('/:collection/:id', function (req, res) {

  })

}
