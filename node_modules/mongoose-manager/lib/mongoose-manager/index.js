
var Manager = {}
  , mongoose
  , app
  , utils = require('../utils')

exports = module.exports = Manager


/**
 * Prepare model, collection and fields mapping
 *
 * @api private
 */

discover = function () {
  var self = Manager
  self.map = {}

  for (var model in mongoose.models) {
    var Model = mongoose.models[model]
      , fields = []

    self.map[Model.collection.name] = {}
    self.map[Model.collection.name].model = Model

    for (var field in Model.schema.tree) {
      var options = Model.schema.tree[field].admin
      if (options) {

        // populate the referenced entity

        if (Model.schema.tree[field].ref) {
          var RefModel = mongoose.models[Model.schema.tree[field].ref]
            , refField = field
            , referred = options.referenced
            , ref = Model.schema.tree[refField].ref

          RefModel
            .find({}, options.referenced)
            .run(function (err, docs) {
              fields.push({
                  name: refField
                , type: ref
                , referenced: docs
                , referred: referred
              })
            })
        }
        else
          fields.push({name: field, type: options.type})
      }
    }
    self.map[Model.collection.name].fields = fields
  }
}


/**
 * Start the manager
 *
 * @api public
 */

Manager.start = function (mongooseArg, appArg) {
  var self = this

  // if no arguments were passed throw an error
  if (!arguments.length)
    throw new Error('Please provide the mongoose and express app arguments')

  mongoose = mongooseArg
  app = appArg

  // set views path, template engine, default layout and public assets
  express = require('express')
  app.use(express.static(__dirname + '/assets'))

  app.set('views', __dirname + '/views')
  app.set('view engine', 'jade')
  app.set('view options', { layout: 'layouts/default' })

  require('express-namespace')
  app.get('/admin', function(){
    require('./controller')(app, mongoose, self, utils)
  })

  // discover the models, collections and fields
  discover()
}


