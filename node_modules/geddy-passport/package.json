{
  "name": "geddy-passport",
  "description": "Passport authentication for Geddy",
  "keywords": [
    "auth",
    "authentication",
    "Twitter",
    "Facebook"
  ],
  "version": "0.0.18",
  "author": {
    "name": "Matthew Eernisse",
    "email": "mde@fleegix.org",
    "url": "http://fleegix.org"
  },
  "dependencies": {
    "jake": "0.5.x",
    "passport": "0.1.x",
    "passport-local": "0.1.x",
    "passport-twitter": "0.1.x",
    "passport-facebook": "0.1.x"
  },
  "main": "./lib/passport",
  "repository": {
    "type": "git",
    "url": "git://github.com/mde/geddy-passport.git"
  },
  "engines": {
    "node": "*"
  },
  "readme": "Geddy-Passport\n\n* * *\n\nGeddy provides built-in authentication which integrates with\n[Passport](http://passportjs.org/) to allow auth against either local accounts\nor third-party social services like Facebook and Twitter.\n\n#### Using the generator\n\nTo set up a new Geddy app with built-in authentication, create your application\nlike normal, then run the `geddy auth` command inside, like so:\n\n```\n$ geddy app by_tor\n$ cd by_tor\n$ geddy auth\n```\n\nThis will pull down [Geddy-Passport](https://github.com/mde/geddy-passport)\nusing NPM, and install all the needed code into your app. This includes the\nneeded Passport libraries, and the Geddy models and controllers for the local\nUser accounts and the login process.\n\n#### Danger, Warning, etc.\n\nThe `geddy auth` generator should only be used in a new Geddy app. If you\nrun it inside an existing app, it may overwrite existing files that you wanted\nto keep.\n\nIf you need to add auth to an existing app, you can take a look at the\nGeddy-Passport project, which is itself a Geddy app scaffold, and use the pieces\nyou need.\n\n#### Configuring Passport\n\nYou'll need to add the settings for Passport in your app's environment.js file.\nThat includes the redirect locations for after an auth failure or success, and\nthe OAuth keys for your app. The setting will look something like this:\n\n```javascript\n  passport: {\n    successRedirect: '/'\n  , failureRedirect: '/login'\n  , twitter: {\n      consumerKey: 'XXXXXXX'\n    , consumerSecret: 'XXXXXXX'\n    }\n  , facebook: {\n      clientID: 'XXXXXXX'\n    , clientSecret: 'XXXXXXX'\n    }\n  }\n```\n\n#### Local users\n\nLocal User accounts just go through the usual RESTful actions you'd get in a\nnormal Geddy resource. Start at \"/users/add\" to create a new User. You can\nmodify \"/app/models/user.js\" to add any other properties you want.\n\n#### Login with third-party services\n\nA successful login with a third-party service like Facebook or Twitter will\ncreate a linked local User account if one does not exist.\n\n#### Authenticated users\n\nAfter a user successfully authenticates, she will end up redirected to the\n`successRedirect` you've specified, and there will be two new items in the\nuser's session:\n\n * userId -- the id for the local User account\n * authType -- the method of authentication (e.g., 'local', 'twitter')\n\n\n",
  "readmeFilename": "README.md",
  "_id": "geddy-passport@0.0.18",
  "_from": "geddy-passport@0.0.18"
}
